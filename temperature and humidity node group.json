[{"id":"a849236.89a3de","type":"mqtt in","z":"b21e44a9.3a1958","name":"","topic":"area/room/temp_c","qos":"1","datatype":"utf8","broker":"83099161.44dac","x":130,"y":500,"wires":[["b3652f7c.f4cd7","b6b03ac.44085c8","803b4d07.1685e","7094d7d6.5e03a8"]]},{"id":"b3652f7c.f4cd7","type":"ui_gauge","z":"b21e44a9.3a1958","name":"sample temp_c","group":"3e6ebb89.211684","order":4,"width":4,"height":3,"gtype":"gage","title":"temp(c)","label":"°C","format":"{{value}}","min":"10","max":"38","colors":["#50afeb","#00e600","#ca3838"],"seg1":"","seg2":"","x":740,"y":500,"wires":[]},{"id":"2916f9da.184866","type":"ui_gauge","z":"b21e44a9.3a1958","name":"sample temp_f","group":"3e6ebb89.211684","order":5,"width":4,"height":3,"gtype":"gage","title":"temp(f)","label":"°F","format":"{{value}}","min":"50","max":"100","colors":["#50afeb","#00e600","#ca3838"],"seg1":"","seg2":"","x":740,"y":540,"wires":[]},{"id":"7094d7d6.5e03a8","type":"moment","z":"b21e44a9.3a1958","name":"","topic":"","input":"","inputType":"date","inTz":"ETC/UTC","adjAmount":"0","adjType":"hours","adjDir":"subtract","format":"dd MM-DD HH:mm:ss","locale":"en-US","output":"payload","outputType":"msg","outTz":"US/Pacific","x":340,"y":580,"wires":[["8237c965.f14048"]]},{"id":"80e94fb3.55b17","type":"ui_text","z":"b21e44a9.3a1958","group":"3e6ebb89.211684","order":2,"width":3,"height":1,"name":"sample timestamp","label":"","format":"{{msg.payload}}","layout":"col-center","x":750,"y":580,"wires":[]},{"id":"9d9d56dc.23cfe8","type":"mqtt in","z":"b21e44a9.3a1958","name":"","topic":"area/room/humidity","qos":"1","datatype":"utf8","broker":"83099161.44dac","x":130,"y":440,"wires":[["b6b03ac.44085c8","fdede2e9.64eb7","f067f5db.4a0598","485f2f0.4e393d"]]},{"id":"3be56e87.679a22","type":"GSheet","z":"b21e44a9.3a1958","creds":"","method":"append","action":"","sheet":"","cells":"","flatten":false,"name":"","x":1630,"y":460,"wires":[[]]},{"id":"b6b03ac.44085c8","type":"join","z":"b21e44a9.3a1958","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"5","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1010,"y":460,"wires":[["dc7c9cc0.63883"]]},{"id":"8237c965.f14048","type":"change","z":"b21e44a9.3a1958","name":"","rules":[{"t":"change","p":"topic","pt":"msg","from":"temp_c","fromt":"str","to":"timestamp","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":550,"y":580,"wires":[["80e94fb3.55b17","b6b03ac.44085c8"]]},{"id":"fdede2e9.64eb7","type":"trigger","z":"b21e44a9.3a1958","name":"","op1":"true","op2":"false","op1type":"bool","op2type":"bool","duration":"90","extend":true,"overrideDelay":false,"units":"s","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":330,"y":380,"wires":[["e0172f3f.ba5f9"]]},{"id":"e0172f3f.ba5f9","type":"ui_led","z":"b21e44a9.3a1958","order":1,"group":"3e6ebb89.211684","width":1,"height":1,"label":"","labelPlacement":"left","labelAlignment":"left","colorForValue":[{"color":"#ff0000","value":"false","valueType":"bool"},{"color":"#008000","value":"true","valueType":"bool"}],"allowColorForValueInMessage":false,"shape":"circle","showGlow":true,"name":"is alive","x":710,"y":380,"wires":[]},{"id":"f067f5db.4a0598","type":"ui_artlessgauge","z":"b21e44a9.3a1958","group":"3e6ebb89.211684","order":3,"width":4,"height":1,"name":"sample humidity","icon":"","label":"relative humidity","unit":"%","layout":"linear","decimals":"2","differential":false,"minmax":false,"colorTrack":"#555555","style":"","colorFromTheme":true,"property":"payload","secondary":"secondary","inline":true,"animate":true,"sectors":[{"val":0,"col":"#007bff","t":"min","dot":0},{"val":100,"col":"#007bff","t":"max","dot":0}],"lineWidth":"5","bgcolorFromTheme":true,"diffCenter":"","x":740,"y":440,"wires":[]},{"id":"f317d9c6.dafe68","type":"unit-converter","z":"b21e44a9.3a1958","category":"temperature","inputUnit":"C","outputUnit":"F","inputField":"payload","outputField":"payload","inputFieldType":"msg","outputFieldType":"msg","roundOutputField":true,"outputFieldDecimals":2,"name":"","x":540,"y":540,"wires":[["2916f9da.184866","b6b03ac.44085c8"]]},{"id":"803b4d07.1685e","type":"change","z":"b21e44a9.3a1958","name":"","rules":[{"t":"change","p":"topic","pt":"msg","from":"temp_c","fromt":"str","to":"temp_f","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":330,"y":540,"wires":[["f317d9c6.dafe68"]]},{"id":"485f2f0.4e393d","type":"trigger","z":"b21e44a9.3a1958","name":"Timout message inject","op1":"","op2":"Message timeout","op1type":"nul","op2type":"str","duration":"90","extend":true,"overrideDelay":false,"units":"s","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":360,"y":420,"wires":[["fb75016.6d2b9"]]},{"id":"fb75016.6d2b9","type":"function","z":"b21e44a9.3a1958","name":"Allow Logging","func":"/*\nReally simple function node that tracks the state of the \nlogging enable switch and blocks messages if logging is disabled\n*/\n\n//Update this const to match your dashboard switch topic.\n//Because the message is consumed by this node and not propigated\n//this isn't stricly necessar and all the switches can use the same\n//topic. But you may find an advantage to all the switches having \n//different topics.\nconst SWITCH_TOPIC = \"sample_enable_logging\";\n\n\nlet EnableLogging = context.get('LoggingEnabled') || false;\nif (msg.topic == SWITCH_TOPIC) {\n    context.set('LoggingEnabled', msg.payload);\n    //drop the message so it doesn't accidentally get logged\n    return null;\n}\nif (EnableLogging) {\n    //logging is enabled, pass the message\n    return msg;\n}\n// Fall through code path, do nothing\n// Control comes here logging is disabled\nreturn null;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1440,"y":460,"wires":[["3be56e87.679a22"]]},{"id":"cd99b187.76d55","type":"ui_switch","z":"b21e44a9.3a1958","name":"Sample enable logging","label":"sample log enable","tooltip":"","group":"3e6ebb89.211684","order":0,"width":0,"height":0,"passthru":false,"decouple":"false","topic":"sample_enable_logging","topicType":"str","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","animate":false,"x":1280,"y":400,"wires":[["fb75016.6d2b9"]],"inputLabels":["From_func"],"outputLabels":["From_UI"]},{"id":"dc7c9cc0.63883","type":"function","z":"b21e44a9.3a1958","name":"order data for logging","func":"/*\nOverview: Look at the comment sin the \"setup\" or \"on start\" tab \nwhich were put there to reduce the number of comments lines here.\n*/\n\n// The order of the data to appear int eh output array.\n// Change this to suit what data you want to log\nvar dataLogOrder = \n[\n\"sync_15_min\", \n\"timestamp\", \n\"temp_c\", \n\"temp_f\", \n\"humidity\" \n];\nvar data_array = [];\n\n// callback function for a forEach iterator\n// It splits a topic into substrings based on the / character\n// and uses the last substring in combination with the dataLogOrder\n// array to determine where in the output array to insert the value\n// for the desired key/value pair.\nfunction insertLoggedData(key) {\n  let splitPath = key.split(\"/\");\n  let position = dataLogOrder.indexOf(splitPath[splitPath.length - 1]);\n  if (position >= 0) {\n      data_array[position] = msg.payload[key];\n  }\n}\n\n//iterate over each key/value pair in the payload\nObject.keys(msg.payload).forEach(insertLoggedData); \n\nmsg.payload = data_array;\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"/*\nOverview:\nThis node allows me to format data into an array in a format that the\nGSheet node can use to insert data into a spreadsheet used to log the \nsensor data. \nBecause I have multiple identical sensors deployed, I wanted this\nto work with all of them and any future ones I add without changing\nthis node. \nThis works because I use topics that use / to separate parts of the\ntopic string with the final part describing what the data is. \n\nSo I can recover that last substring, and use that to copy the input\ndata into an array wth a specific order.\n\nThe order of the data is controlled by the array dataLogOrder.\n\nThis function node cna be reused for a similar task for different\nsensors as well. For example, a particulate sensor such as a\nPMS5003 would have entries for the PM1.0, PM2.5 and PM10 field it\nmeasures. \n\nMore details about the specific feilds that are mentioned in the \ndataLogOrder array are covered int eh comment nodes that are part\nof this node group.\n*/","finalize":"","x":1220,"y":460,"wires":[["fb75016.6d2b9"]]},{"id":"6894032b.503aac","type":"inject","z":"b21e44a9.3a1958","name":"15 min ticker","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"*/15 0-23 * * *","once":false,"onceDelay":0.1,"topic":"home/sync_15_min","payload":"tick","payloadType":"str","x":700,"y":660,"wires":[["360609f8.fe6ad6"]]},{"id":"360609f8.fe6ad6","type":"moment","z":"b21e44a9.3a1958","name":"","topic":"","input":"","inputType":"date","inTz":"ETC/UTC","adjAmount":"0","adjType":"hours","adjDir":"subtract","format":"dd MM-DD HH:mm:ss","locale":"en-US","output":"payload","outputType":"msg","outTz":"US/Pacific","x":920,"y":660,"wires":[["b6b03ac.44085c8"]]},{"id":"173183b8.7139bc","type":"comment","z":"b21e44a9.3a1958","name":"Overview","info":"The arrangement of the nodes is to facilitate multiple groups of them to be inserted into a flow and keep things somewhat tidy.\nFeel free to move the nodes around to see how things interconnect.\n\nThis group of nodes expects a message from the MQTT broker which contains a single value for relative humidity and a single value for a temperature in degrees Celsius. \n\nA timestamp message is created and given a unique topic. The temperature in Celsius is also converted to Fahrenheit in its own message with its own topic. \n\nThe firmware that this group of nodes accompanies is set to update roughly every minute. There are two trigger nodes that will fire if a message does not come in within 90 seconds of the previous message. The first is used for an indicator on the dashboard. I used this to help me ID sensors running on batteries that need their battery replaced. \n\nThe other injects a message into the data logs kept in a Google sheet which helps with debugging such as getting a sense for how reliable my infrastructure is or identifying battery changes. \nThe dashboard setup could be improved but I will leave it to the user to create something tailored to their tastes. \n\nThe join node and all the nodes following it are for logging to a google sheet. See the Logging Discussion comment node for specifics about the choices made there.\n","x":120,"y":360,"wires":[]},{"id":"3f248563.49aaaa","type":"comment","z":"b21e44a9.3a1958","name":"Sync discussion","info":"In my deployment, the injection and timestamp are in their own flow and are connected via link in/out nodes because I have multiple periods for different purposes. \nI've included these 2 nodes here so this group of nodes can function for demonstration purposes.","x":700,"y":700,"wires":[]},{"id":"256e93b3.69b7fc","type":"comment","z":"b21e44a9.3a1958","name":"Logging discussion","info":"In my use case, I'm using Google Sheets as it meant I could set up data visualization easily and keep track of things easily.\n\nTo log to google sheets, the GSheet node seemed to be the best, least hacky option when I created all this. but there were few examples and the documentation for the node isn't great. \n\nThe node expects an array where the order of the data\nrepresents the order of the data for the row. \nThat means the ordering of the array needs to be fixed. \n\nUsing automatic mode on join would require writing function nodes to inject a msg.parts that contain a msg.parts.id that can tie together an humidity and celsius temp in C together before those messages then start getting operated on by the other nodes in this group. That is a non-trivial challenge.\n\nOf the manual modes, merged object won't work because the payloads are not objects. The buffer option is a problem because the unit conversion node produces a number which causes issues for the buffer option (and that's the only place the number based payload causes a problem). In the cases of array and string, the order depends on the order the messages arrive at the join node. Controlling that order would involve a set of delay nodes which is a pretty ugly hack. \n\nSo I ended up using the key/value pair option which requires a function node to build the array for the GSheet node. That has led to the 'cleanest' looking version of this group of nodes. And I've been able to make the function node generic enough that I don't need to modify it when using it in other nodes where I have sensors that provide the temperature and humidity data as presented here. As long as the topics are something/(data type) or something/something/(data type) (or an even greater number of somethings) the function works fine. \nIn my case, I have a system that is something like (rough location)/(room)/(data type) for most topics.\n\nThe sync is because logging every single message was excessive. I found logging every 15 minutes to be fine and there was no real value to averaging the data over those 15 minutes. ITs granular enough that I've been able to observe the garage door open and can tell when a car exited or entered the garage with that interval.\nAlso, with the sensors reporting at a ~1 min rate, the data will be within +/- 1 min of the sync tick. The temperatures I'm measuring here don't change that fast.\n\nFinally, there is the combination of the dashboard switch and another function node. That function node exists purely to store the state of the dashboard switch and either pass or drop messages based on that state. It's separate right now because it was added fairly recently and I haven't looked at modifying the logging node to handle the debug timeout messages and switch functionality yet. And I would like to add that capability in a way that is as generic as possible. \n\n","x":1270,"y":340,"wires":[]},{"id":"83099161.44dac","type":"mqtt-broker","name":"","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"3e6ebb89.211684","type":"ui_group","name":"sample temperature and humidity","tab":"472d8fc.6c1387","order":6,"disp":true,"width":"6","collapse":false},{"id":"472d8fc.6c1387","type":"ui_tab","name":"sample","icon":"dashboard","disabled":false,"hidden":false}]